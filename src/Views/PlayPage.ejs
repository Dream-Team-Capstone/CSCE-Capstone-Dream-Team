<!DOCTYPE html>
<html lang="en-us">
<head>
    <meta charset="UTF-8">
    <title>pyBlock</title>
    <link type="text/css" href="/StylesPages/PlayStyle.css" rel="stylesheet">
    <!-- Add settings handler script -->
    <script src="/Scripts/settingsHandler.js" defer></script>
    <script src="/Scripts/errorHandling.js" defer></script>
    <!-- Hidden input to indicate if user is logged in -->
    <input type="hidden" name="isLoggedIn" value="<%= locals.user ? 'true' : 'false' %>">
    <link type="text/css" href="/StylesPages/accessibilityStyles.css" rel="stylesheet">

    <!-- Use CDN for Blockly resources instead of module imports -->
    <script src="https://unpkg.com/blockly/blockly.min.js"></script>
    <script src="https://unpkg.com/blockly/python_compressed.js"></script>
    <script src="/Scripts/toolbox.js"></script>
    
    <!-- Add this in the head section -->
    <script src="/Guides/projectTutorialGuides.js"></script>
    
    <!-- Define custom blocks -->
    <script>
        // This will run after Blockly is loaded
        document.addEventListener('DOMContentLoaded', function() {
            if (typeof Blockly !== 'undefined') {
                // Define custom print block
                Blockly.Blocks['custom_print'] = {
                    init: function() {
                        this.appendValueInput('TEXT')
                            .setCheck(null)
                            .appendField('print');
                        this.setPreviousStatement(true, null);
                        this.setNextStatement(true, null);
                        this.setColour(160);
                        this.setTooltip('Print the specified text.');
                        this.setHelpUrl('');
                    }
                };

                // Define the Python generator for the custom print block
                Blockly.Python['custom_print'] = function(block) {
                    var value_text = Blockly.Python.valueToCode(block, 'TEXT', Blockly.Python.ORDER_ATOMIC);
                    var code = 'print(' + value_text + ')\n';
                    return code;
                };
                
                console.log('Custom blocks defined successfully');
            } else {
                console.error('Blockly is not loaded!');
            }
        });
    </script>
</head>
<body>

<!-- Add this right after the opening <body> tag -->
<script>
  // Set initial theme state
  localStorage.setItem('highContrast', 'false');
  localStorage.setItem('darkMode', 'false');
  
  // Remove any existing classes
  document.body.classList.remove('high-contrast');
  document.body.classList.remove('dark-mode');
  
  // Wait for Blockly to initialize before applying theme
  document.addEventListener('DOMContentLoaded', function() {
    // Wait a bit for Blockly to fully initialize
    setTimeout(function() {
      if (typeof applyThemeToBlockly === 'function') {
        applyThemeToBlockly();
      }
    }, 500);
  });
</script>

<!-- NAV BAR START -->
<header class="navigation" role="banner">
    
  <!-- List for the logo on the page -->
  <nav aria-label="Main Navigation">
  <ul class="navbar_logo">
    <li>
      <a href="/api/home" aria-label="Link to home page">
        <img class="logo" src="/ImagesUsed/pyBlocks_Updated.png" alt="PyBlocks logo, linking back to home page">
      </a>
    </li>
  </ul>

  <!-- List for the Buttons on the navigation pane -->
  <ul class="navbar_buttons_list" aria-label="Primary navigation buttons">
    <li>
      <a href="#contact" aria-label="Contact Us page (Coming soon)">
        <button class="Nav_Buttons" aria-disabled="true">Contact Us</button> <!-- TBC in another sprint -->
      </a>
    </li>
    <li>
      <a href="/api/tutorials" aria-label="Tutorials page (Coming soon)">
        <button class="Nav_Buttons" aria-disabled="true">Tutorials</button> <!-- TBC in another sprint -->
      </a>
    </li>
    <li>
      <a href="/api/play" aria-label="Play page">
        <button class="Nav_Buttons" aria-label="Start coding by going to the Play page">Play</button>
      </a>
    </li>
    <li>
      <a href="#courses" aria-label="Courses page (Coming soon)">
        <button class="Nav_Buttons" aria-disabled="true">Courses</button> <!-- TBC in another sprint -->
      </a>
    </li>
    <li>
      <a href="/api/resources" aria-label="Resources page (Coming soon)">
        <button class="Nav_Buttons" aria-disabled="true">Resources</button> <!-- TBC in another sprint -->
      </a>
    </li>
    <li>
        <% if (locals.user && locals.user !== null) { %>
          <a href="/api/dashboard">
            <button class="Nav_Buttons" aria-label="Go to dashboard">Dashboard</button>
          </a>
        <% } else { %>
          <a href="/api/login">
            <button class="Nav_Buttons" aria-label="Sign in to your account">Sign In</button>
          </a>
        <% } %>
      </li>
    <li>
      <a href="/api/register" aria-label="Registration page">
        <button class="Nav_Buttons">Register</button>
      </a>
    </li>
  </ul>
  <ul class="Settings_logo" aria-label="Settings navigation">
    <li>
      <a href="/api/settings" aria-label="Settings page">
        <img class="Settings_logo" src="/ImagesUsed/SettingsIcon.png" alt="Settings logo, linking to settings page">
      </a>
    </li>
  </ul>
</nav>
</header>
<!-- NAV BAR END -->

<!-- BODY START -->
<div class="PlayPage_Body" role="main" aria-label="Play page main content">
    <!-- Header above everything -->
    <div class="category-header" role="region" aria-label="Workspace Controls">
        <div class="toggle-container">
            <span class="toggle-label" id="viewModeLabel" aria-live="polite">Block View</span>
        <label class="toggleSwitch" aria-labelledby="viewModeLabel">
            <input type="checkbox" 
                   id="toggleSwitch" 
                   aria-label="Toggle between block and code view"
                   role="switch"
                   aria-checked="false" />
            <span class="slider" aria-hidden="true"></span>
        </label>
        </div>

        <div class="toggle-container">
            <span class="toggle-label" id="contrastModeLabel" aria-live="polite">High Contrast</span>
        <label class="toggleSwitch" aria-labelledby="contrastModeLabel">
            <input type="checkbox" 
                   id="highContrastToggle" 
                   aria-label="Toggle high contrast mode"
                   role="switch"
                   aria-checked="false" />
            <span class="slider" aria-hidden="true"></span>
        </label>
        </div>

        <div class="toggle-container">
            <span class="toggle-label" id="darkModeLabel" aria-live="polite">Dark Mode</span>
        <label class="toggleSwitch" aria-labelledby="darkModeLabel">
            <input type="checkbox" 
                   id="darkModeToggle" 
                   aria-label="Toggle dark mode"
                   role="switch"
                   aria-checked="false" />
            <span class="slider" aria-hidden="true"></span>
        </label>
        </div>

        <% if (locals.tutorialMode) { %>
            <button id="saveProgressBtn" 
                    class="save-progress-btn" 
                    aria-label="Save tutorial progress and return to projects page">
                Save Progress & Return
            </button>
        <% } %>
    </div>

    <div class="workspace-container" role="main" aria-label="Programming workspace">
        <div id="blocklyDiv" 
             role="application" 
             aria-label="Block programming workspace"
             aria-description="Drag and drop blocks from the toolbox to create your program">
        </div>

        <div id="code-pane" 
             role="region" 
             aria-label="Generated Python code"
             aria-live="polite">
            <h2 id="code-title">Generated Python Code:</h2>
            <pre id="output" aria-labelledby="code-title"></pre>
        </div>
    </div>
</div>

<!-- Run Button -->
<button id="runCodeBtn" aria-label="Run the generated Python code">Run Code</button>

<!-- Terminal Output -->
<div id="terminal" class="terminal-output"
    role="region" 
    aria-live="polite" 
    aria-label="Terminal output"
    tabindex="-1">Output will be displayed here!
</div>

<!-- Blockly workspace initialization script -->
<script>
    // Initialize Blockly workspace with the toolbox and specific container
    const workspace = Blockly.inject('blocklyDiv', {
        toolbox: BLOCKLY_TOOLBOX,  // Now using the toolbox from toolbox.js
        horizontalLayout: false,
        toolboxContainer: 'toolbox-container',
        scrollbars: true,
        trashcan: true,
        sounds: true,  
        grid: {
            spacing: 20,
            length: 20,
            colour: '#f5f5f5',
            snap: true
        },
        zoom: {
            controls: true,
            wheel: true,
            startScale: 1.0,
            maxScale: 3,
            minScale: 0.3,
            scaleSpeed: 1.2
        },
        move: {
            scrollbars: true,
            drag: true,
            wheel: true
        },
        fontStyle: {
            Colour: '#000',
        }
    });

    const isTutorialMode = '<%= locals.tutorialMode %>' === 'true';
    const tutorialId = '<%= locals.tutorialId || "" %>';
    
    if (isTutorialMode) {
        // Initialize tutorial guide
        const guide = new TutorialGuide(workspace, tutorialId);
        window.tutorialGuide = guide; // Make it globally accessible
    }

    // Function to generate Python code from blocks and display it
    function generateCode() {
        try {
            const code = Blockly.Python.workspaceToCode(workspace);
            document.getElementById('output').textContent = code || "No code generated.";
        } catch (e) {
            document.getElementById('output').textContent = "Error generating code: " + e.message;
        }
    }

    // Trigger code generation whenever the workspace changes
    workspace.addChangeListener(generateCode);

    // Set initial display styles
    document.addEventListener('DOMContentLoaded', function() {
        const outputPane = document.getElementById('code-pane');
        const blocklyDiv = document.getElementById('blocklyDiv');

        // Initially show blocklyDiv and hide outputPane
        outputPane.style.display = 'none';
        blocklyDiv.style.display = 'block';
    });

    // Switch for going from Block to Python and vice versa
    const toggleSwitch = document.getElementById('toggleSwitch');
    if (toggleSwitch) {
        toggleSwitch.addEventListener('change', function() {
        const outputPane = document.getElementById('code-pane');
        const blocklyDiv = document.getElementById('blocklyDiv');
        const viewModeLabel = document.getElementById('viewModeLabel');
        const isCodeView = this.checked;
        
        if (isCodeView) {
            outputPane.style.display = 'block';
            blocklyDiv.style.display = 'none';
            viewModeLabel.textContent = 'Code View';
        } else {
            outputPane.style.display = 'none';
            blocklyDiv.style.display = 'block';
            viewModeLabel.textContent = 'Block View';
        }
        
        // Update ARIA states
        this.setAttribute('aria-checked', isCodeView);
        this.setAttribute('aria-label', `Switch to ${isCodeView ? 'block' : 'code'} view`);
        
        // Announce view change
        const announcement = `Switched to ${isCodeView ? 'code' : 'block'} view`;
        const ariaAnnouncement = document.createElement('div');
        ariaAnnouncement.setAttribute('role', 'status');
        ariaAnnouncement.setAttribute('aria-live', 'polite');
        ariaAnnouncement.textContent = announcement;
        document.body.appendChild(ariaAnnouncement);
        setTimeout(() => ariaAnnouncement.remove(), 1000);
    });
    }

    const saveProgressBtn = document.getElementById('saveProgressBtn');
    if (saveProgressBtn) {
        saveProgressBtn.addEventListener('click', async function() {
        try {
            const workspace = Blockly.getMainWorkspace();
            
            // Get the workspace state
            const workspaceState = Blockly.serialization.workspaces.save(workspace);
            console.log('Saving workspace state:', workspaceState); // Debug log

            let currentStep = 0;
            if (window.tutorialGuide) {
                currentStep = window.tutorialGuide.getCurrentStep() + 1;
                console.log('Saving progress - Current step:', currentStep);
            }

            const tutorialId = '<%= locals.tutorialId %>' || '';
            console.log('Tutorial ID:', tutorialId); // Debug log

            const payload = {
                tutorialId: tutorialId,
                currentStep: currentStep,
                workspaceState: workspaceState
            };

            console.log('Sending payload:', {
                ...payload,
                workspaceState: 'Workspace data included'
            });

            const response = await fetch('/api/project-tutorials/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP error! status: ${response.status}, response: ${errorText}`);
            }

            const responseData = await response.json();
            console.log('Server response:', responseData);

            if (responseData.status === 'success') {
                window.location.href = '/api/project-tutorials';
            } else {
                alert('Failed to save progress: ' + (responseData.error || 'Unknown error'));
            }
        } catch (error) {
            console.error('Error saving progress:', error);
            alert('Error saving progress: ' + error.message);
        }
    });
    }

    // Update the loadSavedState function to handle HTML responses
    async function loadSavedState() {
        try {
            console.log('Starting to load saved state...');
            
            // Check if user is logged in
            const isLoggedIn = '<%= locals.user %>' !== '';
            if (!isLoggedIn) {
                console.log('User not logged in, skipping state load');
                return;
            }
            
            const response = await fetch('/api/project-tutorials/fetch');
            
            // Check content type to see if we got HTML instead of JSON
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('text/html')) {
                console.log('Received HTML response instead of JSON, likely not authenticated');
                return;
            }
            
            if (!response.ok) {
                throw new Error('Failed to fetch saved state: ' + response.status);
            }
            
            let data;
            try {
                data = await response.json();
            } catch (e) {
                console.error('Error parsing JSON:', e);
                return;
            }
            
            console.log('Full data received from server:', data);
            
            const tutorialId = '<%= locals.tutorialId %>' || '';
            if (!tutorialId) {
                console.log('No tutorial ID provided');
                return;
            }

            // Map tutorial IDs to project numbers
            const projectMapping = {
                'hello-world': '1',
                'loops-intro': '2',
                'variables-basic': '3'
            };

            const projectNumber = projectMapping[tutorialId];
            if (!projectNumber) {
                console.log('Unknown tutorial ID:', tutorialId);
                return;
            }

            const progressField = `project${projectNumber}_progress`;

            if (data.workspace_state) {
                console.log('Found workspace state, attempting to load...');
                try {
                    // Clear the workspace
                    workspace.clear();
                    
                    // Temporarily disable events
                    Blockly.Events.disable();
                    
                    try {
                        // Load the saved state
                        Blockly.serialization.workspaces.load(data.workspace_state, workspace);
                        
                        // Make sure all blocks are editable and movable
                        workspace.getAllBlocks(false).forEach(block => {
                            block.setEditable(true);
                            block.setMovable(true);
                            block.setDeletable(true);
                            if (block.workspace) {
                                block.initSvg();
                                block.render();
                            }
                        });
                    } finally {
                        // Re-enable events
                        Blockly.Events.enable();
                    }
                    
                    // Resize and center
                    Blockly.svgResize(workspace);
                    workspace.scrollCenter();
                    
                    // Force a complete workspace render
                    workspace.render();
                    
                    console.log('Workspace state loaded successfully');
                } catch (e) {
                    console.error('Error loading workspace state:', e);
                }
            }

            // Load tutorial progress
            if (window.tutorialGuide && data[progressField]) {
                const progress = parseFloat(data[progressField]);
                const step = Math.max(0, Math.floor((progress / 100) * 6));
                window.tutorialGuide.setStep(step);
            }
        } catch (error) {
            console.error('Error in loadSavedState:', error);
        }
    }

    // Initialize workspace and load saved state
    const GetWorkspace = Blockly.getMainWorkspace();
    GetWorkspace.addChangeListener(function(e) {
        if (e.type === Blockly.Events.FINISHED_LOADING) {
            loadSavedState();
        }
    });

    // Also try loading immediately
    loadSavedState();

    // Add this to ensure the workspace is properly initialized before loading state
    Blockly.svgResize(workspace);

    // Add keyboard navigation for the code output
    document.getElementById('output').addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            // Select all text in the output
            const selection = window.getSelection();
            const range = document.createRange();
            range.selectNodeContents(this);
            selection.removeAllRanges();
            selection.addRange(range);
        }
    });

    // Compiling Python code
    document.getElementById('runCodeBtn').addEventListener('click', async function() {
        const code = document.getElementById('output').textContent; // Get generated Python code

        try {
            const response = await fetch('/api/run-python', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ code })
            });

            const result = await response.json();
            document.getElementById('terminal').textContent = result.output || result.error;
        } catch (error) {
            document.getElementById('terminal').textContent = 'Error connecting to the server.';
        }

        // Move focus to terminal so screen readers announce the update
        terminal.focus();
    });

    // Apply theme to Blockly workspace
    function applyThemeToBlockly() {
        const isDarkMode = localStorage.getItem('darkMode') === 'true';
        const isHighContrast = localStorage.getItem('highContrast') === 'true';
        
        if (isHighContrast) {
            // Create a high contrast theme
            const highContrastTheme = Blockly.Theme.defineTheme('highContrast', {
                'base': Blockly.Themes.Classic,
                'componentStyles': {
                    'workspaceBackgroundColour': '#000',
                    'toolboxBackgroundColour': '#000',
                    'toolboxForegroundColour': '#fff',
                    'flyoutBackgroundColour': '#000',
                    'flyoutForegroundColour': '#fff',
                    'flyoutOpacity': 1,
                    'scrollbarColour': '#fff',
                    'insertionMarkerColour': '#fff',
                    'insertionMarkerOpacity': 0.3,
                    'scrollbarOpacity': 0.4,
                    'cursorColour': '#fff',
                    'trashcan': true,
                    'trashcanColour': '#fff'
                }
            });
            
            // Apply the theme
            const ws = Blockly.getMainWorkspace();
            if (ws) {
                ws.setTheme(highContrastTheme);
                console.log('Applied high contrast theme to Blockly');
            }
        } else if (isDarkMode) {
            // Create a dark theme
            const darkTheme = Blockly.Theme.defineTheme('dark', {
                'base': Blockly.Themes.Classic,
                'componentStyles': {
                    'workspaceBackgroundColour': '#1e1e1e',
                    'toolboxBackgroundColour': '#333',
                    'toolboxForegroundColour': '#fff',
                    'flyoutBackgroundColour': '#252526',
                    'flyoutForegroundColour': '#ccc',
                    'flyoutOpacity': 1,
                    'scrollbarColour': '#797979',
                    'insertionMarkerColour': '#fff',
                    'insertionMarkerOpacity': 0.3,
                    'scrollbarOpacity': 0.4,
                    'cursorColour': '#fff'
                }
                
            });
            
            // Apply the theme
            const ws = Blockly.getMainWorkspace();
            if (ws) {
                ws.setTheme(darkTheme);
            }
            if (ws && ws.getTheme()) {
            ws.getGrid().setSpacing(20);
            ws.getGrid().setColour('#000000'); // Darker gray grid for dark mode
            ws.getGrid().setLength(20);
        }
        } else {
            // Create a default light theme with explicit settings for all properties
            const defaultTheme = Blockly.Theme.defineTheme('default', {
                'base': Blockly.Themes.Classic,
                'componentStyles': {
                    'workspaceBackgroundColour': '#ffffff',
                    'toolboxBackgroundColour': '#f0f0f0',
                    'toolboxForegroundColour': '#000000',
                    'flyoutBackgroundColour': '#f9f9f9',
                    'flyoutForegroundColour': '#000000',
                    'flyoutOpacity': 1,
                    'scrollbarColour': '#cccccc',
                    'insertionMarkerColour': '#000000',
                    'insertionMarkerOpacity': 0.3,
                    'scrollbarOpacity': 0.4,
                    'cursorColour': '#000000'
                },
                'fontStyle': {
                    'family': 'Arial, sans-serif',
                    'weight': 'normal',
                    'size': 12,
                    'colour': '#000000'
                }
            });
            
            // Apply the default theme
            const ws = Blockly.getMainWorkspace();
            if (ws) {
                ws.setTheme(defaultTheme);
                
                // Force refresh of text elements
                ws.getAllBlocks(false).forEach(block => {
                    if (block.workspace) {
                        block.initSvg();
                        block.render();
                    }
                });
                
            }
        }
    }
    
    // Call this after workspace is initialized
    document.addEventListener('DOMContentLoaded', function() {
        // Wait a bit for Blockly to fully initialize
        setTimeout(applyThemeToBlockly, 500);
    });

    // Add event listeners for the high contrast and dark mode toggles
    document.addEventListener('DOMContentLoaded', function() {
        // Get toggle elements
        const highContrastToggle = document.getElementById('highContrastToggle');
        const darkModeToggle = document.getElementById('darkModeToggle');
        
        // Set initial state based on localStorage
        if (localStorage.getItem('highContrast') === 'true') {
            highContrastToggle.checked = true;
            highContrastToggle.setAttribute('aria-checked', 'true');
        }
        
        if (localStorage.getItem('darkMode') === 'true') {
            darkModeToggle.checked = true;
            darkModeToggle.setAttribute('aria-checked', 'true');
        }
        
        // Add event listener for high contrast toggle
        if (highContrastToggle) {
            highContrastToggle.addEventListener('change', function() {
                if (this.checked) {
                    // Enable high contrast mode
                    document.body.classList.add('high-contrast');
                    document.body.classList.remove('dark-mode');
                    localStorage.setItem('highContrast', 'true');
                    localStorage.setItem('darkMode', 'false');
                    
                    // Update dark mode toggle
                    if (darkModeToggle) {
                        darkModeToggle.checked = false;
                        darkModeToggle.setAttribute('aria-checked', 'false');
                    }
                    
                    // Apply high contrast theme to Blockly
                    if (typeof applyThemeToBlockly === 'function') {
                        applyThemeToBlockly();
                    }
                } else {
                    // Disable high contrast mode
                    document.body.classList.remove('high-contrast');
                    localStorage.setItem('highContrast', 'false');
                    
                    // Apply default theme to Blockly
                    if (typeof applyThemeToBlockly === 'function') {
                        applyThemeToBlockly();
                    }
                }
                
                // Update ARIA state
                this.setAttribute('aria-checked', this.checked);
                
                // Announce change
                const announcement = `High contrast mode ${this.checked ? 'enabled' : 'disabled'}`;
                const ariaAnnouncement = document.createElement('div');
                ariaAnnouncement.setAttribute('role', 'status');
                ariaAnnouncement.setAttribute('aria-live', 'polite');
                ariaAnnouncement.textContent = announcement;
                document.body.appendChild(ariaAnnouncement);
                setTimeout(() => ariaAnnouncement.remove(), 1000);
            });
        }
        
        // Add event listener for dark mode toggle
        if (darkModeToggle) {
            darkModeToggle.addEventListener('change', function() {
                if (this.checked) {
                    // Enable dark mode
                    document.body.classList.add('dark-mode');
                    document.body.classList.remove('high-contrast');
                    localStorage.setItem('darkMode', 'true');
                    localStorage.setItem('highContrast', 'false');
                    
                    // Update high contrast toggle
                    if (highContrastToggle) {
                        highContrastToggle.checked = false;
                        highContrastToggle.setAttribute('aria-checked', 'false');
                    }
                    
                    // Apply dark theme to Blockly
                    if (typeof applyThemeToBlockly === 'function') {
                        applyThemeToBlockly();
                    }
                } else {
                    // Disable dark mode
                    document.body.classList.remove('dark-mode');
                    localStorage.setItem('darkMode', 'false');
                    
                    // Apply default theme to Blockly
                    if (typeof applyThemeToBlockly === 'function') {
                        applyThemeToBlockly();
                    }
                }
                
                // Update ARIA state
                this.setAttribute('aria-checked', this.checked);
                
                // Announce change
                const announcement = `Dark mode ${this.checked ? 'enabled' : 'disabled'}`;
                const ariaAnnouncement = document.createElement('div');
                ariaAnnouncement.setAttribute('role', 'status');
                ariaAnnouncement.setAttribute('aria-live', 'polite');
                ariaAnnouncement.textContent = announcement;
                document.body.appendChild(ariaAnnouncement);
                setTimeout(() => ariaAnnouncement.remove(), 1000);
            });
        }
    });

    // Add this script to update ARIA states
    document.addEventListener('DOMContentLoaded', function() {
        // Get toggle elements
        const toggleSwitch = document.getElementById('toggleSwitch');
        const highContrastToggle = document.getElementById('highContrastToggle');
        const darkModeToggle = document.getElementById('darkModeToggle');
        
        // Set initial ARIA states based on localStorage
        if (localStorage.getItem('highContrast') === 'true') {
            highContrastToggle.checked = true;
            highContrastToggle.setAttribute('aria-checked', 'true');
        }
        
        if (localStorage.getItem('darkMode') === 'true') {
            darkModeToggle.checked = true;
            darkModeToggle.setAttribute('aria-checked', 'true');
        }
        
        // Update ARIA states when toggles change
        if (toggleSwitch) {
            toggleSwitch.addEventListener('change', function() {
                this.setAttribute('aria-checked', this.checked);
            });
        }
        
        if (highContrastToggle) {
            highContrastToggle.addEventListener('change', function() {
                this.setAttribute('aria-checked', this.checked);
            });
        }
        
        if (darkModeToggle) {
            darkModeToggle.addEventListener('change', function() {
                this.setAttribute('aria-checked', this.checked);
            });
        }
    });

    console.log('Current theme:', Blockly.getMainWorkspace().getTheme()); // for debugging
</script>

<!-- Add this script to synchronize Blockly settings with our centralized settings -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // First load settings from our centralized system
        loadAndApplySettings();
        
        // Function to observe when Blockly adds toggle switches to the DOM
        function observeBlocklyUI() {
            // Create a MutationObserver to watch for when Blockly adds its UI elements
            const observer = new MutationObserver(function(mutations) {
                // Look for the dark mode toggle that Blockly might have added
                const darkModeToggle = document.querySelector('.blockly-dark-mode-toggle');
                const highContrastToggle = document.querySelector('.blockly-high-contrast-toggle');
                
                if (darkModeToggle && !darkModeToggle.hasAttribute('data-observed')) {
                    // Mark that we've observed this element
                    darkModeToggle.setAttribute('data-observed', 'true');
                    
                    // Set initial state based on our settings
                    const isDarkMode = sessionStorage.getItem('darkMode') === 'true';
                    if (isDarkMode) {
                        // If Blockly has a method to programmatically toggle dark mode, call it here
                        // Otherwise, we might need to trigger a click on the toggle
                        if (darkModeToggle.checked !== isDarkMode) {
                            darkModeToggle.click();
                        }
                    }
                    
                    // Add our own event listener to sync with centralized settings
                    darkModeToggle.addEventListener('change', function() {
                        const isChecked = this.checked;
                        
                        // Save to our centralized settings
                        const settings = {
                            darkMode: isChecked,
                            highContrast: document.body.classList.contains('high-contrast'),
                            fontSize: parseInt(sessionStorage.getItem('fontSize')) || 14
                        };
                        
                        // Save settings using our handler
                        saveSettings(settings).then(result => {
                            if (!result.success) {
                                console.error('Failed to save dark mode setting:', result.message);
                            }
                        });
                    });
                }
                
                if (highContrastToggle && !highContrastToggle.hasAttribute('data-observed')) {
                    // Mark that we've observed this element
                    highContrastToggle.setAttribute('data-observed', 'true');
                    
                    // Set initial state based on our settings
                    const isHighContrast = sessionStorage.getItem('highContrast') === 'true';
                    if (isHighContrast) {
                        // If Blockly has a method to programmatically toggle high contrast, call it here
                        // Otherwise, we might need to trigger a click on the toggle
                        if (highContrastToggle.checked !== isHighContrast) {
                            highContrastToggle.click();
                        }
                    }
                    
                    // Add our own event listener to sync with centralized settings
                    highContrastToggle.addEventListener('change', function() {
                        const isChecked = this.checked;
                        
                        // Save to our centralized settings
                        const settings = {
                            darkMode: document.body.classList.contains('dark-mode'),
                            highContrast: isChecked,
                            fontSize: parseInt(sessionStorage.getItem('fontSize')) || 14
                        };
                        
                        // Save settings using our handler
                        saveSettings(settings).then(result => {
                            if (!result.success) {
                                console.error('Failed to save high contrast setting:', result.message);
                            }
                        });
                    });
                }
            });
            
            // Start observing the document body for changes
            observer.observe(document.body, { 
                childList: true, 
                subtree: true 
            });
        }
        
        // Start observing after a short delay to ensure Blockly has initialized
        setTimeout(observeBlocklyUI, 1000);
    });
</script>

<!-- BODY END -->

<!-- FOOTER START -->
<footer role="contentinfo" aria-label="Footer navigation">

    <!-- List for the logo on the page -->
    <ul class="navbar_logo">
      <li>
        <a href="/api/home">
          <img class = logo src = "/ImagesUsed/pyBlocks_Updated.png" alt = "PyBlocks logo, linking back to home page">
        </a>
      </li>
    </ul>
  
    <!-- List for the links in the footer -->
    <ul class="footer_buttons">
      <li><a href="/api/resources" aria-label="Resources section (Coming soon)">Resources</a></li>
      <li><a href="/api/tutorials" aria-label="Tutorials section (Coming soon)">Tutorials</a></li>
      <li><a href="#editors" aria-label="Open blank editors (Coming soon)">Open Blank Editors</a></li>
    </ul>
    <!-- holds links and some navigation, may add more later -->
  </footer>
  <!-- FOOTER END -->

<script>
    // Load saved settings on page load
    window.onload = function () {
        const isDarkMode = localStorage.getItem('darkMode') === 'true';
        const isHighContrast = localStorage.getItem('highContrast') === 'true';
        const savedFontSize = localStorage.getItem('fontSize') || '14'; // Default to 14px
  
        // Apply dark mode
        if (isDarkMode) document.body.classList.add('dark-mode');
  
        // Apply high contrast mode
        if (isHighContrast) document.body.classList.add('high-contrast');
  
        // Apply font size to all relevant elements except the title
        document.body.style.fontSize = `${savedFontSize}px`;
  
        document.querySelectorAll('input, button, label, .Register_Button, .Form_Group, p, a, .navbar_buttons_list button, #terminal, #runCodeBtn').forEach(el => {
            el.style.fontSize = `${savedFontSize}px`;
        });
  
    };
  </script>
  </body>
  </html>
